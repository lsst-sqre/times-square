[tox]
envlist = docker,coverage-report,typing,lint
isolated_build = True

[docker:postgres]
image = postgres:latest
ports =
    5433:5433/tcp
environment =
    POSTGRES_PASSWORD=INSECURE-PASSWORD
    POSTGRES_USER=timessquare
    POSTGRES_DB=timessquare
    PGPORT=5433
# The healthcheck ensures that tox-docker won't run tests until the
# container is up and the command finishes with exit code 0 (success)
healthcheck_cmd = PGPASSWORD=$POSTGRES_PASSWORD psql \
    --user=$POSTGRES_USER --dbname=$POSTGRES_DB \
    --host=127.0.0.1 --quiet --no-align --tuples-only \
    -1 --command="SELECT 1"
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[docker:redis]
image = redis:latest
ports =
    6379:6379/tcp
healthcheck_cmd =
    redis-cli ping
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1


[testenv]
description = Environment with test dependencies.
deps =
    -r{toxinidir}/requirements/main.txt
    -r{toxinidir}/requirements/dev.txt

[testenv:docker]
description = Run pytest with PostgreSQL via Docker.
docker =
    postgres
    redis
setenv =
    # Set up test values configurations that must be obtained through
    # environment variables; pytest can override these for individual test runs
    TS_ENVIRONMENT_URL = https://test.example.com
    TS_DATABASE_URL = postgresql://timessquare@127.0.0.1:5433/timessquare
    TS_DATABASE_PASSWORD = INSECURE-PASSWORD
    TS_REDIS_URL = redis://localhost:6379/0
deps =
    -r{toxinidir}/requirements/main.txt
    -r{toxinidir}/requirements/dev.txt
commands =
    pytest -vv --cov=timessquare --cov-branch --cov-report= {posargs}

[testenv:coverage-report]
description = Compile coverage from each test run.
skip_install = true
deps = coverage[toml]>=5.0.2
depends =
    docker
commands = coverage report

[testenv:typing]
description = Run mypy.
commands =
    mypy src/timessquare tests setup.py

[testenv:lint]
description = Lint codebase by running pre-commit (Black, isort, Flake8).
skip_install = true
deps =
    pre-commit
commands = pre-commit run --all-files

[testenv:run]
description = Run the development server with auto-reload for code changes.
usedevelop = true
whitelist_externals =
    docker-compose
setenv =
    SAFIR_PROFILE = development
    TS_ENVIRONMENT_URL = https://test.example.com
    TS_DATABASE_URL = postgresql://timessquare@127.0.0.1:5432/timessquare
    TS_DATABASE_PASSWORD = INSECURE-PASSWORD
commands =
    timessquare init
    timessquare develop
commands_pre =
    docker-compose up -d
    holdup -t 60 -T 5 -i 1 -n tcp://localhost:5432/
