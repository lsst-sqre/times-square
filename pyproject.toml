[project]
name = "times-square"
description = "Times Square is a service for parameterized Jupyter Notebooks as dynamic webpages."
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Private :: Do Not Upload",
    "Typing :: Typed",
]
requires-python = ">=3.13"
# Use requirements/main.in for runtime dependencies instead.
dependencies = [
    "fastapi",
    "gunicorn",
    "starlette",
    "uvicorn[standard]",
    "safir[db,arq,redis]",
    "alembic[tz]",
    "pydantic[email]",
    "pydantic_settings",
    "click",
    "nbformat",
    "nbconvert",
    "jsonschema",
    "jinja2",
    "gidgethub",
    "markdown-it-py[linkify,plugins]",
    "mdformat",
    "mdformat-gfm",
    "PyYAML",
    "sentry-sdk",
    "sse-starlette",
    "nbstripout>=0.8.1",
    "python-dateutil>=2.9.0.post0",
]
dynamic = ["version"]

[project.scripts]
times-square = "timessquare.cli:main"

[project.urls]
Homepage = "https://times-square.lsst.io"
Source = "https://github.com/lsst-sqre/times-square"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "asgi-lifespan",
    "coverage[toml]",
    "httpx",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "uvicorn",
    "respx",
    "httpx-sse == 0.4.0",
    "holdup",
    "scriv",
]
docs = [
    "documenteer[guide]>=1.0",
]
lint = [
    "pre-commit",
    "pre-commit-uv",
    "ruff",
]
tox = [
    "tox",
    "tox-uv",
    "tox-docker",
]
typing = [
    "mypy",
    "sqlalchemy[mypy]",
    "types-PyYAML",
    "types-python-dateutil"
]

[tool.setuptools_scm]

[tool.coverage.run]
parallel = true
branch = true
source = ["timessquare"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
python_files = [
    "tests/*.py",
    "tests/*/*.py"
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"

# The rule used with Ruff configuration is to disable every lint that has
# legitimate exceptions that are not dodgy code, rather than cluttering code
# with noqa markers. This is therefore a reiatively relaxed configuration that
# errs on the side of disabling legitimate lints.
#
# Reference for settings: https://beta.ruff.rs/docs/settings/
# Reference for rules: https://beta.ruff.rs/docs/rules/
[tool.ruff]
extend = "ruff-shared.toml"
extend-exclude = [
    "tests/data/**",
]

[tool.ruff.lint.per-file-ignores]
"alembic/env.py" = [
    "INP001",  # Alembic config isn't a package
]
"alembic/versions/**" = [
    "INP001",  # Alembic config isn't a package
    "D103",    # Alembic migrations don't need docstrings
]
"src/timessquare/config.py" = [
    "FBT001",  # Pydantic validators take boolean arguments
]
"src/timessquare/sentry.py" = [
    "S311",  # We're not using random.random for cryptography
]
"tests/**" = [
    "C901",    # tests are allowed to be complex, sometimes that's convenient
    "D101",    # tests don't need docstrings
    "D103",    # tests don't need docstrings
    "PLR0915", # tests are allowed to be long, sometimes that's convenient
    "PT012",   # way too aggressive about limiting pytest.raises blocks
    "S101",    # tests should use assert
    "S106",    # tests are allowed to hard-code dummy passwords
    "SLF001",  # tests are allowed to access private members
    "T201",    # tests are allowed to use print
    "ASYNC221",  # async tests are allowed to use sync functions
]

[tool.ruff.lint.isort]
known-first-party = ["timessquare", "tests"]
known-third-party = ["alembic"]
split-on-trailing-comma = false
